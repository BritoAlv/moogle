@page "/"

<PageTitle>El Moogle!</PageTitle>
<div  class=input-container>
<input  id="input" @bind="query" @bind:event="oninput" @onkeydown="actions" placeholder="Que Quieres Buscar">
<span id="suggestion"  > @(trie_search(query)) </span>
</div>
<button type="default" class="button" @onclick="RunQuery">🔍 Buscar</button>

<button type="default" class="button" @onclick="RunSuggestions"> Sugerencias  <a id="number_suggestions" style="color:red"> (@number_suggestions) </a>  </button>

<div class="box">
    <div class="box-sm red"></div>
    <div class="box-sm orange"></div>
    <div class="box-sm yellow "></div>
    <div class="box-sm green "></div>
    <div class="box-sm blue "></div>
    <div class="box-sm purple"></div>
</div>
@if (result.Count == 0 && query_done)
{
    <p style="font-size:30px; font-family: Ubuntu">No hay nada mi rey 😢, toca el botón de sugerencias a ver si tienes suerte.</p>
}
else
{
    <ul class="results">
    @foreach (var item in result.Items())
    {
        <ul>
            <div class="item">
                <p class="title"> @item.Title</p>
                <p> @((MarkupString)item.Snippet)</p>
                <div class="box">
                    <div class="box-sm red"></div>
                    <div class="box-sm orange"></div>
                    <div class="box-sm yellow "></div>
                    <div class="box-sm green "></div>
                    <div class="box-sm blue "></div>
                    <div class="box-sm purple"></div>
                </div>    
            </div>
        </ul>
    }
    </ul>
}
@if(query_done)
{
    <span style="font-size: 30px; font-family: Ubuntu Mono">  with speed of <a id=query_search style="color:red"> @time </a> , This search was powered by: </span>
    <img style="width:130px; position: relative; top: -5px" src="./logo.png" >
    <svg  style=" width:100px; height:200px; position:relative; top:-6px" viewBox="0 0 859.71 463.37"><defs><style>.cls-1{fill:#3388c8;}.cls-2{fill:#005ba8;}.cls-3{fill:#003566;}.cls-4{fill:#080e2c;}</style></defs><g id="Capa_2" data-name="Capa 2"><g id="Capa_1-2" data-name="Capa 1"><path class="cls-1" d="M193.06,251.23H442.25V0S193.06,249.7,193.06,251.23Z"/><path class="cls-2" d="M442.27,0V153.28H596.8S443.21,0,442.27,0Z"/><path class="cls-3" d="M596.8,152.77H500.72v96.86S596.8,153.36,596.8,152.77Z"/><path class="cls-4" d="M500.66,249.61V197.2H447.82S500.34,249.61,500.66,249.61Z"/><path class="cls-4" d="M77.44,406.71l77.34-106.16V462.29H123V396.81L77.44,459.74,31.76,396.81v65.48H0V300.55Z"/><path class="cls-4" d="M240.56,301,312.7,462.29H278.3l-10.69-24H213.5l-10.68,24H168.51Zm14.51,109.2-14.41-33.43-14.61,33.43Z"/><path class="cls-4" d="M405.64,304.28v31.46H366.82V462.29H335V335.74H296.05V304.28Z"/><path class="cls-4" d="M478.28,463.37q-33.13-.11-56.56-23.33-23.52-23.54-23.53-56.66t23.53-56.75Q445.35,303,478.28,303l-.1.39c24.4,0,43.8,10.84,56.85,23.43l-22.64,22.65q-14.31-14.13-34-14.12a45.79,45.79,0,0,0-33.92,14.12q-14.11,14.31-14.11,34a48.1,48.1,0,0,0,82.14,33.91L535.13,440A79.81,79.81,0,0,1,478.28,463.37Z"/><path class="cls-4" d="M667.76,326.63q23.63,23.63,23.63,56.75T667.76,440q-23.52,23.32-56.65,23.33T554.45,440q-23.52-23.54-23.52-56.66t23.52-56.75Q578.08,303,611.11,303T667.76,326.63Zm-90.67,22.54Q563,363.48,563,383.19a48.17,48.17,0,1,0,14.11-34Z"/><path class="cls-4" d="M782.37,406.71l77.34-106.16V462.29H828V396.81l-45.58,62.93-45.68-62.93v65.48H704.93V300.55Z"/></g></g></svg>
}
@code {
    private bool query_done = false;
    private string query = "";
    public string time = "0s";
    public string actual_suggestion="";
    public int number_suggestions = 0;
    private SearchResult result = new SearchResult();
    private Moogle moogle = new Moogle();
    private void RunQuery() {
        result = moogle.Query(query);
        time = moogle.time;
        query_done = true;
        number_suggestions = moogle.the_query.words_to_suggest.Count;
    }

    private void actions(KeyboardEventArgs e)
    {
        if(e.Code == "Enter")
        {
            RunQuery();
        }
        else if(e.Code == "ArrowUp")
        {
            query = actual_suggestion;
        }
    }

    private string trie_search(string quer){
        /* get last word of the query, if its length
        is greater than 2, find it in the trie, if found, 
        return query - word + found_word
        */
        int len = quer.Length-1;
        int start = quer.Length-1;
        string word = "";
        while(start>=0 && char.IsLetter(quer[start])){
            word = quer[start]+ word;
            start--;
        } 
        start++;
        // at this point we are at the start of the word
        if((len-start) <2)
        {
            actual_suggestion = "";
        }
        else
        {
            // the word goes from [start, len]
            actual_suggestion = quer.Substring(0, start)+moogle.x.the_trie.search_word(word);
        }
        return actual_suggestion;
    }

    private void RunSuggestions(){
    	if(number_suggestions > 0)
    	{
    		string suggested_query = moogle.get_suggestion(query);
    		if(!(query == suggested_query))
    		{
    			query = suggested_query;
    			number_suggestions--;
    			RunQuery();
    			time = moogle.time;
    		}
    	};
        return;
    }
}
